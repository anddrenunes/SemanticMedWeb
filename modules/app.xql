xquery version "3.0";

module namespace app="http://www.mlhim.org/mlhim-emr/templates";

import module namespace templates="http://exist-db.org/xquery/templates" at "templates.xql";
import module namespace config="http://www.mlhim.org/mlhim-emr/config" at "config.xqm";
declare namespace mlhim2 ="http://www.mlhim.org/xmlns/mlhim2/2_4_1";
declare namespace rdfs = "http://www.w3.org/2000/01/rdf-schema#";
declare namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:test". The function
 : has to take exactly 3 parameters.
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};
declare function app:gender($node as node(), $model as map(*)) {
let $title := "By Gender Counts"
let $demogs := collection("/db/apps/mlhim-emr/data/demog")//mlhim2:el-06b0c425-f7ef-4d46-8573-97091ae52d60
  let $total := count($demogs)
  let $mcnt := count($demogs//mlhim2:el-0ac3f22e-64ca-4309-be88-874cd14649a0[contains(mlhim2:DvString-dv,"Male")])
  let $fcnt := count($demogs//mlhim2:el-0ac3f22e-64ca-4309-be88-874cd14649a0[contains(mlhim2:DvString-dv,"Female")])

return
      <results>
      <ReportTitle>{$title}</ReportTitle><br/>
      <male>Males:     {$mcnt}</male><br/>
      <female>Females: {$fcnt}</female><br/>
      <Total>Total:    {$total}</Total><br/>
      </results>    
};
declare function app:bmpavg($node as node(), $model as map(*)) {
let $title := "BMP Average Values"
let $bmp := collection("/db/apps/mlhim-emr/data/care")//mlhim2:el-0c71fe4c-8dd2-4d0f-af05-15b5b7b9de24
  let $total := count($bmp)
  let $savg := avg($bmp//mlhim2:el-f6c5ea6e-6458-4799-874d-7f3d365d260d/mlhim2:magnitude)
  let $gavg := avg($bmp//mlhim2:el-28f7ec54-254b-4b66-9c42-3b275fc1df38/mlhim2:magnitude)
  let $pavg := avg($bmp//mlhim2:el-781e9dda-055a-4a95-bee3-d482c44d1186/mlhim2:magnitude)
  let $uavg := avg($bmp//mlhim2:el-866aa21b-9cd2-48cc-9c18-8e799086d222/mlhim2:magnitude)
  let $cavg := avg($bmp//mlhim2:el-51b66f95-13b5-4e25-9c08-5e6d43aeba79/mlhim2:magnitude)

return
      <results>
      <ReportTitle>{$title}</ReportTitle><br/>
      <sodium>Sodium:         {$savg}</sodium><br/>
      <glucose>Glucose:       {$gavg}</glucose><br/>
      <potassium>Potassium:   {$pavg}</potassium><br/>
      <urea-bun>Urea (BUN):   {$uavg}</urea-bun><br/>
      <creatinine>Creatinine: {$cavg}</creatinine><br/>
      <Total>Total Records:   {$total}</Total><br/>
      </results>
};
declare function app:bmpvalues($node as node(), $model as map(*)) {
for $bmp in collection("/db/apps/mlhim-emr/data/care")//mlhim2:el-0c71fe4c-8dd2-4d0f-af05-15b5b7b9de24
  let $recid := substring-after(util:collection-name($bmp),'pr-')
  let $gender := collection(concat("/db/apps/mlhim-emr/data/demog/pr-",$recid))//mlhim2:el-0ac3f22e-64ca-4309-be88-874cd14649a0/mlhim2:DvString-dv/text()
  let $s := $bmp//mlhim2:el-f6c5ea6e-6458-4799-874d-7f3d365d260d/mlhim2:magnitude/text()
  let $g := $bmp//mlhim2:el-28f7ec54-254b-4b66-9c42-3b275fc1df38/mlhim2:magnitude/text()
  let $p := $bmp//mlhim2:el-781e9dda-055a-4a95-bee3-d482c44d1186/mlhim2:magnitude/text()
  let $u := $bmp//mlhim2:el-866aa21b-9cd2-48cc-9c18-8e799086d222/mlhim2:magnitude/text()
  let $c := $bmp//mlhim2:el-51b66f95-13b5-4e25-9c08-5e6d43aeba79/mlhim2:magnitude/text()

return
       <data>{$recid},{$gender},{$s},{$g},{$p},{$u},{$c}<br/></data>

};
declare function app:semlinks($node as node(), $model as map(*)) {
let $ct := collection("/db/apps/mlhim-emr/ccds")//xs:complexType

for $elem in $ct
return <links> {
          for $child in $elem/(@*|text())
          return element {if ($child instance of attribute())
                          then name($child)
                          else 'value'} {
                    string($child)
                 }
       }<br/></links>
};